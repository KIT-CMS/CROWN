<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="CMakeLists_8txt_1a189dcf28522f98051928b33e9e1c9593" prot="public" static="no">
        <type>et</type>
        <definition>using DCHANNELS =  et</definition>
        <argsstring></argsstring>
        <name>DCHANNELS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt" line="10" column="31" bodyfile="/work/sbrommer/ntuple_prototype/CMakeLists.txt" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="CMakeLists_8txt_1a820a6b58c2beed9f67932b476c7d8a21" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mt</definition>
        <argsstring></argsstring>
        <name>mt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt" line="10" column="46" bodyfile="/work/sbrommer/ntuple_prototype/CMakeLists.txt" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="CMakeLists_8txt_1a32bf0e6fcff51e53bd74e70ba1d622b2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tt</definition>
        <argsstring></argsstring>
        <name>tt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt" line="10" column="48" bodyfile="/work/sbrommer/ntuple_prototype/CMakeLists.txt" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="CMakeLists_8txt_1a1d100c8a8a4dc8364a5a15cebb113319" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cmake_minimum_required</definition>
        <argsstring>(VERSION 3.10) if(NOT DEFINED ANALYSIS) message(FATAL_ERROR &quot;Please specify the config to be used with -DANALYSIS</argsstring>
        <name>cmake_minimum_required</name>
        <param>
          <type>VERSION 3.</type>
          <declname>10</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt" line="1" column="1"/>
      </memberdef>
      <memberdef kind="function" id="CMakeLists_8txt_1a3cd6f752600ad0cc0ea8a2af8b77fe73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>em</type>
        <definition>em set</definition>
        <argsstring>(CHANNELS &quot;et;mt;tt;em&quot;) endif() if(NOT DEFINED SHIFTS) message(STATUS &quot;No shifts specificed</argsstring>
        <name>set</name>
        <param>
          <type>CHANNELS &quot;et;mt;tt;em&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt" line="11" column="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">cmake_minimum_required(VERSION<sp/>3.10)</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Check<sp/>that<sp/>config<sp/>name<sp/>is<sp/>given<sp/>with<sp/>-DCONFIG,<sp/>needed<sp/>to<sp/>generate<sp/>the<sp/>C++<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NOT<sp/>DEFINED<sp/>ANALYSIS)</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/></highlight><highlight class="stringliteral">&quot;Please<sp/>specify<sp/>the<sp/>config<sp/>to<sp/>be<sp/>used<sp/>with<sp/>-DANALYSIS=my_config_name&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="6"><highlight class="normal">endif()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">message(STATUS<sp/>&quot;Set<sp/>up<sp/>analysis<sp/>for<sp/>config<sp/>${ANALYSIS}.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="8"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="9"><highlight class="stringliteral">if<sp/>(NOT<sp/>DEFINED<sp/>CHANNELS)</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">No<sp/>channel<sp/>specificed,<sp/>build<sp/>the<sp/>four<sp/>main<sp/>channels<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>-DCHANNELS=et;mt;tt;em</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CHANNELS<sp/>&quot;</highlight><highlight class="normal">et;mt;tt;em</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral">if<sp/>(NOT<sp/>DEFINED<sp/>SHIFTS)</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">No<sp/>shifts<sp/>specificed,<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>-DSHIFTS=all</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(SHIFTS<sp/>&quot;</highlight><highlight class="normal">all</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">if<sp/>(NOT<sp/>DEFINED<sp/>SAMPLES)</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">Please<sp/>specify<sp/>the<sp/>samples<sp/>to<sp/>be<sp/>used<sp/>with<sp/>-DSAMPLES=samples</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">Set<sp/>up<sp/>analysis<sp/>with<sp/>--config<sp/>${ANALYSIS}<sp/>--channels<sp/>${CHANNELS}<sp/>--shifts<sp/>${SHIFTS}<sp/>--samples<sp/>${SAMPLES}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">#<sp/>Define<sp/>the<sp/>default<sp/>compiler<sp/>flags<sp/>for<sp/>different<sp/>build<sp/>types,<sp/>if<sp/>different<sp/>from<sp/>the<sp/>cmake<sp/>defaults</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">set(CMAKE_CXX_FLAGS_DEBUG<sp/>&quot;</highlight><highlight class="normal">-g</highlight><highlight class="stringliteral">&quot;<sp/>CACHE<sp/>STRING<sp/>&quot;</highlight><highlight class="normal">Set<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>compiler<sp/>flags<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>build<sp/>type<sp/>Debug</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">set(CMAKE_CXX_FLAGS_RELEASE<sp/>&quot;</highlight><highlight class="normal">-O3<sp/>-DNDEBUG</highlight><highlight class="stringliteral">&quot;<sp/>CACHE<sp/>STRING<sp/>&quot;</highlight><highlight class="normal">Set<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>compiler<sp/>flags<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>build<sp/>type<sp/>Release</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="27"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">#<sp/>The<sp/>build<sp/>type<sp/>should<sp/>be<sp/>set<sp/>so<sp/>that<sp/>the<sp/>correct<sp/>compiler<sp/>flags<sp/>are<sp/>chosen</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">set(CMAKE_BUILD_TYPE<sp/>&quot;</highlight><highlight class="normal">Release</highlight><highlight class="stringliteral">&quot;<sp/>CACHE<sp/>STRING<sp/>&quot;</highlight><highlight class="normal">Choose<sp/>the<sp/>type<sp/>of<sp/>build,<sp/>options<sp/>are:<sp/>Debug<sp/>Release<sp/>RelWithDebInfo<sp/>MinSizeRel.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral">#<sp/>Set<sp/>the<sp/>default<sp/>install<sp/>directory<sp/>to<sp/>the<sp/>build<sp/>directory</highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">set(CMAKE_INSTALL_PREFIX<sp/>${CMAKE_BINARY_DIR}<sp/>CACHE<sp/>STRING<sp/>&quot;</highlight><highlight class="normal">Set<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>install<sp/>prefix<sp/>to<sp/>the<sp/>build<sp/>directory</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="34"><highlight class="stringliteral">#<sp/>Create<sp/>the<sp/>project</highlight></codeline>
<codeline lineno="35"><highlight class="stringliteral">project(ToBeNamedPrototype<sp/>CXX)</highlight></codeline>
<codeline lineno="36"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="37"><highlight class="stringliteral">#<sp/>Find<sp/>ROOT<sp/>and<sp/>print<sp/>details</highlight></codeline>
<codeline lineno="38"><highlight class="stringliteral">find_package(ROOT<sp/>6.24<sp/>REQUIRED<sp/>COMPONENTS<sp/>ROOTVecOps<sp/>ROOTDataFrame)</highlight></codeline>
<codeline lineno="39"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="40"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="41"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">Found<sp/>ROOT<sp/>with<sp/>following<sp/>settings:</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="42"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Version:<sp/>${ROOT_VERSION}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="43"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>ROOT<sp/>executable:<sp/>${ROOT_EXECUTABLE}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="44"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Include<sp/>directories:<sp/>${ROOT_INCLUDE_DIRS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="45"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Compiler<sp/>flags:<sp/>${ROOT_CXX_FLAGS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="46"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="47"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="48"><highlight class="stringliteral">#<sp/>Add<sp/>ROOT<sp/>flags<sp/>to<sp/>compile<sp/>options,<sp/>e.g.<sp/>we<sp/>have<sp/>to<sp/>use<sp/>the<sp/>same<sp/>C++<sp/>standard</highlight></codeline>
<codeline lineno="49"><highlight class="stringliteral">#<sp/>Note<sp/>that<sp/>the<sp/>flags<sp/>from<sp/>the<sp/>build<sp/>type,<sp/>e.g.<sp/>CMAKE_CXX_FLAGS_RELEASE,<sp/>are</highlight></codeline>
<codeline lineno="50"><highlight class="stringliteral">#<sp/>automatically<sp/>appended.<sp/>You<sp/>can<sp/>check<sp/>this<sp/>during<sp/>build<sp/>time<sp/>by<sp/>enabling</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral">#<sp/>the<sp/>verbose<sp/>make<sp/>output<sp/>with<sp/>&quot;</highlight><highlight class="normal">VERBOSE=1<sp/>make</highlight><highlight class="stringliteral">&quot;.</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral">set(CMAKE_CXX_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_CXX_FLAGS}<sp/>${ROOT_CXX_FLAGS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral">#<sp/>Use<sp/>-fconcepts<sp/>with<sp/>g++<sp/>to<sp/>silence<sp/>following<sp/>warning:</highlight></codeline>
<codeline lineno="55"><highlight class="stringliteral">#<sp/>warning:<sp/>use<sp/>of<sp/>&apos;auto&apos;<sp/>in<sp/>parameter<sp/>declaration<sp/>only<sp/>available<sp/>with<sp/>&apos;-fconcepts</highlight></codeline>
<codeline lineno="56"><highlight class="stringliteral">if<sp/>(CMAKE_CXX_COMPILER_ID<sp/>STREQUAL<sp/>GNU)</highlight></codeline>
<codeline lineno="57"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Attach<sp/>-fconcepts<sp/>to<sp/>the<sp/>compiler<sp/>flags<sp/>to<sp/>silence<sp/>warnings.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="58"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_FLAGS<sp/>&quot;</highlight><highlight class="normal">${CMAKE_CXX_FLAGS}<sp/>-fconcepts</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="59"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="60"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="61"><highlight class="stringliteral">#<sp/>Find<sp/>the<sp/>C++<sp/>standard<sp/>from<sp/>ROOT<sp/>and<sp/>set<sp/>it<sp/>as<sp/>the<sp/>standard<sp/>of<sp/>this<sp/>project</highlight></codeline>
<codeline lineno="62"><highlight class="stringliteral">#<sp/>We<sp/>require<sp/>the<sp/>C++<sp/>standard<sp/>17<sp/>or<sp/>20<sp/>and<sp/>don&apos;t<sp/>want<sp/>to<sp/>fall<sp/>back<sp/>to<sp/>lower<sp/>versions.</highlight></codeline>
<codeline lineno="63"><highlight class="stringliteral">set(CMAKE_CXX_STANDARD_REQUIRED<sp/>ON)</highlight></codeline>
<codeline lineno="64"><highlight class="stringliteral">if<sp/>(${ROOT_CXX_FLAGS}<sp/>MATCHES<sp/>&quot;</highlight><highlight class="normal">\\-std\\=c\\+\\+17</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Set<sp/>c++17<sp/>as<sp/>the<sp/>C++<sp/>standard.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_STANDARD<sp/>17)</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral">elseif<sp/>(${ROOT_CXX_FLAGS}<sp/>MATCHES<sp/>&quot;</highlight><highlight class="normal">\\-std\\=c\\+\\+20</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Set<sp/>c++20<sp/>as<sp/>the<sp/>C++<sp/>standard.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(CMAKE_CXX_STANDARD<sp/>20)</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral">else<sp/>()</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">The<sp/>standard<sp/>c++17<sp/>or<sp/>higher<sp/>is<sp/>required<sp/>but<sp/>not<sp/>found<sp/>in<sp/>the<sp/>ROOT<sp/>flags:<sp/>${ROOT_CXX_FLAGS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral">#<sp/>Build<sp/>the<sp/>logging<sp/>library</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral">include(ExternalProject)</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral">ExternalProject_Add(spdlog</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>PREFIX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spdlog</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>GIT_REPOSITORY<sp/><sp/>https://github.com/gabime/spdlog.git</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>GIT_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1.8.5</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>CMAKE_ARGS<sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_BUILD_TYPE=Release</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-DCMAKE_INSTALL_PREFIX=${CMAKE_BINARY_DIR}</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>LOG_DOWNLOAD<sp/>1<sp/>LOG_CONFIGURE<sp/>1<sp/>LOG_BUILD<sp/>1<sp/>LOG_INSTALL<sp/>1</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral">#<sp/>Make<sp/>an<sp/>imported<sp/>target<sp/>out<sp/>of<sp/>the<sp/>build<sp/>logging<sp/>library</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral">add_library(logging<sp/>STATIC<sp/>IMPORTED)</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral">file(MAKE_DIRECTORY<sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/include</highlight><highlight class="stringliteral">&quot;)<sp/>#<sp/>required<sp/>because<sp/>the<sp/>include<sp/>dir<sp/>must<sp/>be<sp/>existent<sp/>for<sp/>INTERFACE_INCLUDE_DIRECTORIES</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral">include(GNUInstallDirs)<sp/>#<sp/>required<sp/>to<sp/>populate<sp/>CMAKE_INSTALL_LIBDIR<sp/>with<sp/>lib<sp/>or<sp/>lib64<sp/>required<sp/>for<sp/>the<sp/>destination<sp/>of<sp/>libspdlog.a</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral">set_target_properties(logging<sp/>PROPERTIES</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>IMPORTED_LOCATION<sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}/libspdlog.a</highlight><highlight class="stringliteral">&quot;</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>INTERFACE_INCLUDE_DIRECTORIES<sp/>&quot;</highlight><highlight class="normal">${CMAKE_BINARY_DIR}/include</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral">add_dependencies(logging<sp/>spdlog)<sp/>#<sp/>enforces<sp/>to<sp/>build<sp/>spdlog<sp/>before<sp/>making<sp/>the<sp/>imported<sp/>target</highlight></codeline>
<codeline lineno="94"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="95"><highlight class="stringliteral">#<sp/>Print<sp/>settings<sp/>of<sp/>the<sp/>executable</highlight></codeline>
<codeline lineno="96"><highlight class="stringliteral">string(TOUPPER<sp/>${CMAKE_BUILD_TYPE}<sp/>CMAKE_BUILD_TYPE_UPPER)</highlight></codeline>
<codeline lineno="97"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="98"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">The<sp/>executable<sp/>is<sp/>configured<sp/>with<sp/>following<sp/>flags:</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="99"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Build<sp/>type:<sp/>${CMAKE_BUILD_TYPE}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="100"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>C++<sp/>compiler:<sp/>${CMAKE_CXX_COMPILER}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Base<sp/>compiler<sp/>flags:<sp/>${CMAKE_CXX_FLAGS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Compiler<sp/>flags<sp/>from<sp/>build<sp/>type:<sp/>${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="103"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="104"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="105"><highlight class="stringliteral">#<sp/>Find<sp/>Python<sp/>3</highlight></codeline>
<codeline lineno="106"><highlight class="stringliteral">find_package(Python<sp/>3.6<sp/>REQUIRED<sp/>COMPONENTS<sp/>Interpreter)</highlight></codeline>
<codeline lineno="107"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="108"><highlight class="stringliteral">#<sp/>Find<sp/>Sphinx<sp/>for<sp/>documentation</highlight></codeline>
<codeline lineno="109"><highlight class="stringliteral">set(CMAKE_MODULE_PATH<sp/>&quot;</highlight><highlight class="normal">${PROJECT_SOURCE_DIR}/cmake</highlight><highlight class="stringliteral">&quot;<sp/>${CMAKE_MODULE_PATH})</highlight></codeline>
<codeline lineno="110"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="111"><highlight class="stringliteral">#<sp/>Generate<sp/>the<sp/>C++<sp/>code</highlight></codeline>
<codeline lineno="112"><highlight class="stringliteral">set(GENERATE_CPP_OUTPUT_DIRECTORY<sp/>${CMAKE_BINARY_DIR})</highlight></codeline>
<codeline lineno="113"><highlight class="stringliteral">set(GENERATE_CPP_INPUT_TEMPLATE<sp/>&quot;</highlight><highlight class="normal">${CMAKE_SOURCE_DIR}/analysis_template.cxx</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="114"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="115"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="116"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal">Generate<sp/>C++<sp/>code<sp/>with<sp/>following<sp/>settings:</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Output<sp/>directory:<sp/>${GENERATE_CPP_OUTPUT_DIRECTORY}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Template:<sp/>${GENERATE_CPP_INPUT_TEMPLATE}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="119"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Analysis:<sp/>${ANALYSIS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="120"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Channels:<sp/>${CHANNELS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="121"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Shifts:<sp/>${SHIFTS}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="122"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="normal"><sp/><sp/>Samples:<sp/>${SAMPLES}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="123"><highlight class="stringliteral">message(STATUS<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="124"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="125"><highlight class="stringliteral">file(MAKE_DIRECTORY<sp/>${GENERATE_CPP_OUTPUT_DIRECTORY})</highlight></codeline>
<codeline lineno="126"><highlight class="stringliteral">execute_process(</highlight></codeline>
<codeline lineno="127"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>COMMAND<sp/>${Python_EXECUTABLE}<sp/>${CMAKE_SOURCE_DIR}/generate.py<sp/>--template<sp/>${GENERATE_CPP_INPUT_TEMPLATE}<sp/>--output<sp/>${GENERATE_CPP_OUTPUT_DIRECTORY}<sp/>--analysis<sp/>${ANALYSIS}<sp/>--channels<sp/>${CHANNELS}<sp/>--shifts<sp/>${SHIFTS}<sp/>--samples<sp/>${SAMPLES}</highlight></codeline>
<codeline lineno="128"><highlight class="stringliteral">)</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral">set(GENERATE_CPP_OUTPUT_FILELIST<sp/>&quot;</highlight><highlight class="normal">${GENERATE_CPP_OUTPUT_DIRECTORY}/files.txt</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral">if(NOT<sp/>EXISTS<sp/>${GENERATE_CPP_OUTPUT_FILELIST})</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(FATAL_ERROR<sp/>&quot;</highlight><highlight class="normal">List<sp/>of<sp/>generated<sp/>C++<sp/>files<sp/>in<sp/>${GENERATE_CPP_OUTPUT_FILELIST}<sp/>does<sp/>not<sp/>exist.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral">endif()</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral">#<sp/>Iterate<sp/>over<sp/>files<sp/>from<sp/>output<sp/>filelist<sp/>and<sp/>add<sp/>build<sp/>and<sp/>install<sp/>targets</highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral">FILE(READ<sp/>${GENERATE_CPP_OUTPUT_FILELIST}<sp/>FILELIST)</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral">STRING(REGEX<sp/>REPLACE<sp/>&quot;</highlight><highlight class="normal">\n</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight><highlight class="stringliteral">&quot;<sp/>FILELIST<sp/>${FILELIST})</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral">set(TARGET_NAMES<sp/>&quot;</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="139"><highlight class="stringliteral">foreach(FILENAME<sp/>${FILELIST})</highlight></codeline>
<codeline lineno="140"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>STRING(REGEX<sp/>REPLACE<sp/>&quot;</highlight><highlight class="normal">.cxx</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="stringliteral">&quot;<sp/>TARGET_NAME<sp/>${FILENAME})</highlight></codeline>
<codeline lineno="141"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>list(APPEND<sp/>TARGET_NAMES<sp/>${TARGET_NAME})</highlight></codeline>
<codeline lineno="142"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>set(FULL_PATH<sp/>&quot;</highlight><highlight class="normal">${GENERATE_CPP_OUTPUT_DIRECTORY}/${FILENAME}</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="143"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="144"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Add<sp/>build<sp/>target</highlight></codeline>
<codeline lineno="145"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>message(STATUS<sp/>&quot;</highlight><highlight class="normal">Add<sp/>build<sp/>target<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>file<sp/>${FILENAME}.</highlight><highlight class="stringliteral">&quot;)</highlight></codeline>
<codeline lineno="146"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>add_executable(${TARGET_NAME}<sp/>${FULL_PATH})</highlight></codeline>
<codeline lineno="147"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>target_include_directories(${TARGET_NAME}<sp/>PRIVATE<sp/>${CMAKE_SOURCE_DIR})</highlight></codeline>
<codeline lineno="148"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>target_link_libraries(${TARGET_NAME}<sp/>ROOT::ROOTVecOps<sp/>ROOT::ROOTDataFrame<sp/>logging)</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>#<sp/>Add<sp/>install<sp/>target,<sp/>basically<sp/>just<sp/>copying<sp/>the<sp/>executable<sp/>around<sp/>relative<sp/>to<sp/>CMAKE_INSTALL_PREFIX</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>install(TARGETS<sp/>${TARGET_NAME}<sp/>DESTINATION<sp/>bin)</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral">endforeach()</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral">#<sp/>Include<sp/>tests</highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral">enable_testing()</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral">add_subdirectory(tests)</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral">add_subdirectory(docs)</highlight></codeline>
    </programlisting>
    <location file="/work/sbrommer/ntuple_prototype/CMakeLists.txt"/>
  </compounddef>
</doxygen>
