[core]
no_lock = True
log_level = DEBUG

[worker]
keep_alive = False
ping_interval = 20
wait_interval = 20
max_reschedules = 3

[DEFAULT]
name = GPU_example
ENV_NAME = ML_LAW

; grid storage protocol and path usable from submitting machine and worker nodes of cluster
; job in- and output will be stored in $wlcg_path under subdirectory of analysis $name
wlcg_path = srm://cmssrm-kit.gridka.de:8443/srm/managerv2?SFN=/pnfs/gridka.de/cms/disk-only/store/user/${USER}/LAW_storage
; default htcondor job submission configuration (modifiable for each task)
htcondor_accounting_group = cms.higgs
htcondor_remote_job = True
htcondor_request_cpus = 1
htcondor_request_gpus = 1
; for all cores in total
htcondor_universe = docker 
;image without GPU libraries
# htcondor_docker_image = mschnepf/slc7-condocker:latest
;image with GPU libraries
htcondor_docker_image = tvoigtlaender/slc7-condocker-cuda-11.5-cudnn8:base
; create log files in htcondor jobs
transfer_logs = True
; set local scheduler
local_scheduler = True
; set tolerance for workflow success with failed branches
tolerance = 0.00
acceptance = 1.00
; submit only missing htcondor workflow branches (should always be true)
only_missing = True

; bootstrap file to be sourced at beginning of htcondor jobs (relative PATH to framework.py)
bootstrap_file = setup_law_remote.sh

[SaveToRemote]
[RunRemote]
htcondor_walltime = 360
htcondor_request_memory = 1000
htcondor_requirements = ( TARGET.CloudSite =?= "topas" )
# && (Machine =?= "f03-001-179-e.gridka.de")
htcondor_request_disk = 1000000
replace_processor_tar = True
[ReadFromRemote]
